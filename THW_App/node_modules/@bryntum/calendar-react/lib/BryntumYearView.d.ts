import React from 'react';
import { AlignSpec, Base, CalendarMixin, Container, ContainerItemConfig, ContainerLayoutConfig, DayCell, DomConfig, EventBar, EventModel, KeyMapConfig, MaskConfig, MenuItemConfig, Model, OverflowPopup, OverflowPopupConfig, PagingToolbarConfig, Panel, PanelCollapserConfig, PanelCollapserOverlayConfig, PanelHeader, Rectangle, ResourceModel, Scroller, ScrollerConfig, StateProvider, TabConfig, Tool, ToolConfig, ToolbarConfig, TooltipConfig, Widget, YearView, YearViewListeners } from '@bryntum/calendar';
import { processWidgetContent } from './WrapperHelper.js';
export declare type BryntumYearViewProps = {
    adopt?: HTMLElement | string;
    align?: AlignSpec | string;
    alignSelf?: string;
    allowDragCreate?: boolean;
    allowDragMove?: boolean;
    allowDragResize?: boolean;
    anchor?: boolean;
    animateTimeShift?: boolean;
    appendTo?: HTMLElement | string;
    ariaDescription?: string;
    ariaLabel?: string;
    ariaLive?: string;
    autoCreate?: {
        gesture?: string;
        newName?: Function | string;
        step?: string;
        snapType?: 'round' | 'ceil' | 'floor';
        duration?: string;
        startHour?: number;
    } | string | boolean;
    bbar?: (ContainerItemConfig | string)[] | ToolbarConfig | PagingToolbarConfig | null;
    bodyCls?: string | object;
    bubbleEvents?: object;
    callOnFunctions?: boolean;
    centered?: boolean;
    cls?: string | object;
    collapsed?: boolean;
    collapsible?: boolean | PanelCollapserConfig | PanelCollapserOverlayConfig;
    config?: object;
    constrainTo?: HTMLElement | Widget | Rectangle;
    contentElementCls?: string | object;
    dataset?: Record<string, string>;
    date?: Date;
    dateFormat?: string;
    dateSeparator?: string;
    dayCellNameFormat?: string;
    dayCellRenderer?: (cellData: {
        date: Date;
        events: EventModel[];
        cellConfig: {
            style: string;
            cls: string;
        };
    }) => DomConfig | string | void;
    defaultBindProperty?: string;
    defaultFocus?: (widget: Widget) => boolean;
    defaults?: ContainerItemConfig;
    descriptionFormat?: string | string[] | boolean[];
    descriptionRenderer?: (view: Widget) => string;
    disabled?: boolean | 'inert';
    dock?: 'top' | 'bottom' | 'left' | 'right' | 'start' | 'end' | 'header' | 'pre-header' | object;
    draggable?: boolean | {
        handleSelector?: string;
    };
    dragUnit?: string;
    emptyCellRenderer?: ((dayCellRenderer: {
        cellData: DayCell;
    }) => DomConfig | void) | object | string;
    eventCountTip?: boolean | Record<string, boolean | string>;
    eventDots?: {
        marginTop?: number;
        max?: number;
        gap?: number;
        size?: number;
        stripe?: boolean;
    };
    eventFilter?: ((event: EventModel) => boolean) | string;
    eventHeaderRenderer?: ((detail: {
        view: typeof CalendarMixin;
        eventRecord: EventModel;
        resourceRecord: ResourceModel;
        renderData: {
            style: object;
            cls: object;
            iconStyle: object;
            iconCls: object;
            eventColor: string;
            dataset: object;
            solidBar: boolean;
            bodyColor: string;
        };
        showBullet: boolean;
    }) => DomConfig | DomConfig[] | string | void) | string;
    eventHeight?: number | string;
    eventRenderer?: ((detail: {
        view: typeof CalendarMixin;
        eventRecord: EventModel;
        resourceRecord: ResourceModel;
        renderData: {
            style: object;
            cls: object;
            iconStyle: object;
            iconCls: object;
            eventColor: string;
            dataset: object;
            solidBar: boolean;
            bodyColor: string;
            showBullet: boolean;
        };
    }) => DomConfig | DomConfig[] | string | void) | string;
    eventSorter?: (lhs: EventModel | EventBar, rhs: EventModel | EventBar) => number;
    eventSpacing?: number;
    extraData?: any;
    filterEventResources?: boolean;
    flex?: number | string;
    floating?: boolean;
    footer?: {
        dock?: 'top' | 'right' | 'bottom' | 'left' | 'start' | 'end';
        html?: string;
        cls?: string;
    } | string;
    getPrimaryResource?: ((eventRecord: EventModel) => ResourceModel) | string;
    header?: string | boolean | PanelHeader;
    height?: string | number;
    hidden?: boolean;
    hideAnimation?: boolean | object;
    hideNonWorkingDays?: boolean;
    hideWhenEmpty?: boolean;
    id?: string;
    ignoreParentReadOnly?: boolean;
    insertBefore?: HTMLElement | string;
    insertFirst?: HTMLElement | string;
    itemCls?: string;
    items?: Record<string, ContainerItemConfig | MenuItemConfig | boolean | null> | (ContainerItemConfig | MenuItemConfig | Widget)[];
    keyMap?: Record<string, KeyMapConfig>;
    layout?: string | ContainerLayoutConfig;
    layoutStyle?: object;
    lazyItems?: Record<string, ContainerItemConfig> | ContainerItemConfig[] | Widget[];
    listeners?: YearViewListeners;
    localeClass?: typeof Base;
    localizable?: boolean;
    localizableProperties?: string[];
    margin?: number | string;
    maskDefaults?: MaskConfig;
    masked?: boolean | string | MaskConfig;
    maxDate?: Date | string;
    maxDots?: number;
    maxHeight?: string | number;
    maximizeOnMobile?: number | string;
    maxWidth?: string | number;
    minDate?: Date | string;
    minHeight?: string | number;
    minWidth?: string | number;
    monitorResize?: boolean;
    namedItems?: Record<string, ContainerItemConfig>;
    nonWorkingDays?: Record<number, boolean>;
    overflowButtonRenderer?: (domConfig: {
        tag: string;
        className: object;
        text: string;
        style: object;
        dataset: object;
    }, overflowCount: number) => DomConfig | string | void;
    overflowPopup?: OverflowPopupConfig;
    overflowPopupTrigger?: 'click' | 'mouseover' | 'hover';
    owner?: Widget;
    positioned?: boolean;
    preventTooltipOnTouch?: boolean;
    readOnly?: boolean;
    relayStoreEvents?: boolean;
    resourceImagePath?: string;
    responsive?: object;
    responsiveRoot?: boolean;
    responsiveState?: string;
    responsiveTarget?: string | Widget;
    ripple?: boolean | {
        delegate?: string;
        color?: string;
        radius?: number;
        clip?: string;
    };
    rootElement?: ShadowRoot | HTMLElement;
    scrollable?: boolean | ScrollerConfig | Scroller;
    scrollAction?: 'hide' | 'realign' | null;
    shortDateFormat?: string;
    shortDateTimeFormat?: string;
    shortEventCls?: string;
    shortEventDuration?: string | number;
    showAnimation?: boolean | object;
    showBullet?: boolean | {
        bar?: boolean;
        noBar?: boolean;
    };
    showEvents?: boolean | 'heatmap' | 'dots';
    showResourceAvatars?: boolean | string;
    showTooltipWhenDisabled?: boolean;
    sixWeeks?: boolean;
    stateful?: boolean | object | string[];
    statefulEvents?: object | string[];
    stateId?: string;
    stateProvider?: StateProvider;
    strictRecordMapping?: boolean;
    strips?: Record<string, ContainerItemConfig>;
    syncCalendarDate?: boolean;
    syncViewDate?: boolean;
    tab?: boolean | TabConfig;
    tag?: string;
    tbar?: (ContainerItemConfig | string)[] | ToolbarConfig | PagingToolbarConfig | null;
    textAlign?: 'left' | 'center' | 'right' | 'start' | 'end';
    timeFormat?: string;
    title?: string;
    tools?: Record<string, ToolConfig> | null;
    tooltip?: string | TooltipConfig | null;
    trapFocus?: boolean;
    type?: 'yearview' | 'year';
    ui?: 'plain' | 'toolbar' | string | object;
    weekStartDay?: number;
    weight?: number;
    width?: string | number;
    x?: number;
    y?: number;
    year?: number;
    onBeforeAutoCreate?: ((event: {
        domEvent: Event;
        date: Date;
        resourceRecord: ResourceModel;
        view: typeof CalendarMixin;
    }) => Promise<boolean> | boolean | void) | string;
    onBeforeChangeDate?: ((event: {
        oldDate: Date;
        date: Date;
    }) => Promise<boolean> | boolean | void) | string;
    onBeforeDestroy?: ((event: {
        source: Base;
    }) => void) | string;
    onBeforeHide?: ((event: {
        source: Widget;
    }) => Promise<boolean> | boolean | void) | string;
    onBeforeResponsiveStateChange?: ((event: {
        source: Widget;
        state: string;
        oldState: string;
    }) => void) | string;
    onBeforeSetRecord?: ((event: {
        source: Container;
        record: Model;
    }) => void) | string;
    onBeforeShow?: ((event: {
        source: Widget | any;
    }) => Promise<boolean> | boolean | void) | string;
    onBeforeShowOverflowPopup?: ((event: {
        cell: HTMLElement;
        cellData: DayCell;
        date: Date;
        overflowPopup: OverflowPopup;
    }) => Promise<boolean> | boolean | void) | string;
    onBeforeStateApply?: ((event: {
        event: {
            state: object;
        };
    }) => Promise<boolean> | boolean | void) | string;
    onBeforeStateSave?: ((event: {
        event: {
            state: object;
        };
    }) => Promise<boolean> | boolean | void) | string;
    onCatchAll?: ((event: {
        [key: string]: any;
        type: string;
    }) => void) | string;
    onCellMapPopulated?: (() => void) | string;
    onCollapse?: ((event: {
        source: Panel;
    }) => void) | string;
    onDayCellPopulated?: ((event: {
        events: EventModel[];
        The: Date;
    }) => void) | string;
    onDestroy?: ((event: {
        source: Base;
    }) => void) | string;
    onDirtyStateChange?: ((event: {
        source: Container;
        dirty: boolean;
    }) => void) | string;
    onEmptyCellClick?: ((event: {
        domEvent: Event;
        date: Date;
    }) => void) | string;
    onEventAutoCreated?: ((event: {
        source: typeof CalendarMixin;
        eventRecord: EventModel;
    }) => void) | string;
    onEventPropagate?: ((event: {
        eventEndDate: Date;
        propagateEndDate: Date;
        isAllDay: boolean;
        isOverflow: boolean;
        overflows: boolean;
        eventRecord: EventModel;
        date: Date;
    }) => void) | string;
    onExpand?: ((event: {
        source: Panel;
    }) => void) | string;
    onFocusIn?: ((event: {
        source: Widget;
        fromElement: HTMLElement;
        toElement: HTMLElement;
        fromWidget: Widget;
        toWidget: Widget;
        backwards: boolean;
    }) => void) | string;
    onFocusOut?: ((event: {
        source: Widget;
        fromElement: HTMLElement;
        toElement: HTMLElement;
        fromWidget: Widget;
        toWidget: Widget;
        backwards: boolean;
    }) => void) | string;
    onHide?: ((event: {
        source: Widget;
    }) => void) | string;
    onPaint?: ((event: {
        source: Widget;
        firstPaint: boolean;
    }) => void) | string;
    onReadOnly?: ((event: {
        readOnly: boolean;
    }) => void) | string;
    onRecompose?: (() => void) | string;
    onRefresh?: ((event: {
        source: YearView;
    }) => void) | string;
    onResize?: ((event: {
        source: Widget;
        width: number;
        height: number;
        oldWidth: number;
        oldHeight: number;
    }) => void) | string;
    onResponsiveStateChange?: ((event: {
        source: Widget;
        state: string;
        oldState: string;
    }) => void) | string;
    onShow?: ((event: {
        source: Widget;
    }) => void) | string;
    onShowOverflowPopup?: ((event: {
        cell: HTMLElement;
        cellData: DayCell;
        date: Date;
        overflowPopup: OverflowPopup;
    }) => void) | string;
    onToolClick?: ((event: {
        source: Tool;
        tool: Tool;
    }) => void) | string;
};
export declare class BryntumYearView extends React.Component<BryntumYearViewProps> {
    static instanceClass: typeof YearView;
    static instanceName: string;
    processWidgetContent: typeof processWidgetContent;
    static configNames: string[];
    static propertyConfigNames: string[];
    static propertyNames: string[];
    instance: YearView;
    element: HTMLElement;
    componentDidMount(): void;
    componentWillUnmount(): void;
    shouldComponentUpdate(nextProps: Readonly<BryntumYearViewProps>, nextState: Readonly<{}>): boolean;
    render(): React.ReactNode;
}
